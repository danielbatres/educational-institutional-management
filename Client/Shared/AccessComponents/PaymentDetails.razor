@inject IJSRuntime JSRuntime

<AccessComponent Title="Detalles de pago" Description="Ingresa los detalles de pago" MaxWidth="max-width: 470px;">
  <form>
    <div class="label">
      <label for="target-number">N&uacute;mero de tarjeta <strong>*</strong></label>
    </div>
    <input class="input" type="text" placeholder="XXXX XXXX XXXX XXXX" id="target-number">
    <div style="display: flex; gap: 15px;">
      <div>
        <div class="label">
      <label for="expiration-date">Fecha de expiraci&oacute;n <strong>*</strong></label>
    </div>
    <input type="text" class="input" placeholder="mm/yy" id="expiration-date" >
      </div>
      <div>
        <div class="label">
      <label for="cvv">CVV <strong>*</strong></label>
    </div>
    <input type="text" class="input" placeholder="XXX" id="cvv" >
      </div>
    </div>
    <div class="label">
      <label for="owner-name">Nombre del titular <strong>*</strong></label>
    </div>
    <input type="text" class="input" placeholder="Ingresar nombre del titular" id="owner-name">
    <div class="login-button">
      <button type="button" class="lgn-button button primary-background-button" @onclick="@CreateNewInstitution">
        Realizar pago
      </button>
    </div>
  </form>
</AccessComponent>

@code {
  [Inject]
  private NavigationManager NavigationManager { get; set; }
  [Inject]
  private IInstitutionService InstitutionService { get; set; }
  [Inject]
  private RegisterInstitutionContext InstitutionContext { get; set; }
  [Inject]
  private UserContext UserContext { get; set; }
  [Inject]
  private IUserService UserService { get; set; }
  [Inject]
  private ISettingsService SettingsService { get; set; }
  [Inject]
  private HubsConnection HubsConnection { get; set; }
  [Inject]
  private LoadingContext LoadingContext { get; set; }

  protected override void OnInitialized() {
    InstitutionContext.OnChange += HandleStateChange;
  }

  private async Task CreateNewInstitution() {
    LoadingContext.SetLoading(true);
    LoadingContext.SetLoadingMessage("Registrando instituci√≥n...");

    await InstitutionService.RegisterNewInstitution(InstitutionContext.Institution);

    await InstitutionContext.SetInstitutionUsers();
    UserContext.User.InstitutionId = InstitutionContext.Institution.Id;
    UserContext.User.IsAdmin = true;

    await UserService.Update(UserContext.User);

    await SettingsService.Create(new() {
      Id = Guid.NewGuid(),
      UserId = UserContext.User.Id,
      AppearanceId = 1
    });

    UserContext.User.Settings = await SettingsService.GetSettingsByUserId(UserContext.User.Id);

    await HubsConnection.ConnectHubs(InstitutionContext.Institution.Id.ToString());

    LoadingContext.SetLoading(false);
    await JSRuntime.InvokeVoidAsync("location.reload");
  }

  private void HandleStateChange() {
    StateHasChanged();
  }
}
