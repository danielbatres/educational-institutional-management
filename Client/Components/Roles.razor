@switch (_roleContext.Selection) {
  case "roles":
    <section>
     <CreateRole />
      <div class="roles-settings-container">
        <article>
          <div>
            <h3>
              Roles de la instituci&oacute;n
            </h3>
            <p>Crea y edita roles personalizables, selecciona sus permisos y asignalos a los miembros de la instituci&oacute;n</p>
          </div>
          <div class="roles-actions">
            <input type="text" placeholder="Buscar rol" class="input">
            <button type="button" class="button primary-background-button" @onclick="@(() => _roleContext.SetRolCreation(true))">Crear rol</button>
          </div>
        </article>
        <article>
          <div class="roles-list">
            <ul class="tags">
              <li>
                <h5>Color</h5>
              </li>
              <li>
                <h5>Nombre del rol</h5>
              </li>
              <li>
                <h5>Cantidad de miembros</h5>
              </li>
              <li>
                <h5>Cantidad de permisos</h5>
              </li>
              <li>
                <h5>Acciones</h5>
              </li>
            </ul>
            <div>
              @if (Loading) {
                <div class="skeleton-container">
                  @for (int i = 0; i < 10; i++) {
                    <div class="skeleton-row"></div>
                  }
                </div>
              } else {
                @foreach (var role in UpdatedRoles) {
                  Guid roleId = role.Id;

                  <div class="rol-card">
                    <ul class="rol-element">
                      <li>
                        <div></div>
                      </li>
                      <li>
                        <p>@role.Name</p>
                      </li>
                      <li>
                        <p>@role.MembersCount</p>
                      </li>
                      <li>
                        <p>@role.PermissionsCount</p>
                      </li>
                      <li>
                        <div class="update-rol centered-container" @onclick="@(() => SetSelection(roleId))">
                          <i class="fi fi-tr-pen-square"></i>
                        </div>
                      </li>
                    </ul>
                  </div>
                }
              }
            </div>
          </div>
        </article>
      </div>
    </section>
    break;
  case "show-role":
    <ShowRole />
    break;
}

@code {
  private List<Role> UpdatedRoles { get; set; } = new();
  [Inject]
  private RolesHubManager _rolesHubManager { get; set; }
  [Inject]
  private UserContext _userContext { get; set; }
  [Inject]
  private NavigationManager _navigationManager { get; set; }
  [Inject]
  private RoleContext _roleContext { get; set; }
  private bool Loading { get; set; } = true;

  private void SetSelection(Guid roleId) {
    _roleContext.SetActualRoleId(roleId);

    _roleContext.SetSelection("show-role");
  }

  protected override async Task OnInitializedAsync() {
    _rolesHubManager.RolesUpdatedHandler(roles => {
      UpdatedRoles = roles;
      StateHasChanged();
    });

    await _rolesHubManager.SendRolesUpdatedAsync(_userContext.User.InstitutionId.ToString());
    Loading = false;
  }

  protected override void OnInitialized() {
    _roleContext.OnChange += HandleStateChange;
    _roleContext.SetSelection("roles");
  }

  private void HandleStateChange() {
    StateHasChanged();
  }
}