<div class="action-buttons">
  <div class="action-button">
    <i class="fi fi-tr-users-medical"></i>
    <div class="action-button-info">
      <div class="action-stand">
      </div>
      <div>
        <h6>Agregar estudiante</h6>
        <p>Agrega un nuevo estudiante en la instituci&oacute;n</p>
      </div>
    </div>
    <div class="button-side">
      <button type="button" class="button primary-background-button" @onclick="@(() => NavigateTo("students/new-student"))">Nuevo estudiante</button>
    </div>
  </div>
  <div class="action-button">
    <i class="fi fi-tr-book-bookmark"></i>
    <div class="action-button-info">
      <div class="action-stand">
      </div>
      <div>
        <h6>Agregar curso</h6>
        <p>Agregar un nuveo curso en la instituci&oacute;n</p>
      </div>
    </div>
    <div class="button-side">
      <button type="button" class="button primary-background-button"
        @onclick="@(() => NavigateTo("courses/new-course"))">Nuevo curso</button>
    </div>
  </div>
</div>

@code {
  [Inject]
  private UserContext UserContext { get; set; }
  [Inject]
  private NavigationManager NavigationManager { get; set; }

  protected override void OnInitialized() {
    UserContext.OnChange += HandleStateChange;
  }

  private void NavigateTo(string navigate) {
    string baseRoute = $"/application/{UserContext.User.InstitutionId}/{navigate}";

    NavigationManager.NavigateTo(baseRoute);
  }

  private void HandleStateChange() {
    StateHasChanged();
  } 
}