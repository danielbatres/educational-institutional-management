<article>
  <div>
    <h4>Solicitudes de ingreso</h4>
    <p>
      Aqu&iacute; recibiras las solicitudes de ingreso de cualquier instituci&oacute;n
    </p>
  </div>
  @for (int i = 0; i < ReceivedMembershipRequests.Count; i++) {
    Institution institutionRequest = Institutions?.Where(x => x.Id == ReceivedMembershipRequests[i].InstitutionId).FirstOrDefault() ?? new();
    string institutionName = institutionRequest?.Name ?? String.Empty;
    int membershipIndex = i;

    if (ReceivedMembershipRequests[i].IsAccepted) continue;
    <div>
      <h5>Solicitud de ingreso sin aceptar de:</h5>
      <h4>
        @institutionName
      </h4>
      <h5>Autor</h5>
      <p>
        Has sido invitado a ingresar en la instituci&oacute;n
      </p>
      @if (ReceivedMembershipRequests[i].Message != null && !ReceivedMembershipRequests[i].Message.Equals(string.Empty)) {
        <h5>Mensaje</h5>
        <p>@ReceivedMembershipRequests[i].Message</p>
      }
      <p>@ReceivedMembershipRequests[i].CreationDate</p>
      <button type="button" class="button primary-background-button" @onclick="@(() => AcceptRequest(institutionRequest?.Id.ToString() ?? string.Empty, membershipIndex))">
        Aceptar
      </button>
    </div>
  }
</article>

@code {
  [Inject]
  private UserContext _userContext { get; set; }
  [Inject]
  private IInstitutionService _institutionService { get; set; }
  [Inject]
  private IUserService _userService { get; set; }
  [Inject]
  private ISettingsService _settingsService { get; set; }
  public List<MembershipRequest> ReceivedMembershipRequests { get; set; } = new();
  private List<Institution> Institutions { get; set; } = new();

  protected override async Task OnInitializedAsync() {
    ReceivedMembershipRequests = _userContext.User.ReceivedMembershipRequests?.ToList() ?? new();

    if (!ReceivedMembershipRequests.Count.Equals(0)) {
      foreach (var request in ReceivedMembershipRequests) {
        Institutions.Add(await _institutionService.GetInstitution(request.InstitutionId.ToString()) ?? new());
      }
    }
  }

  private async Task AcceptRequest(string institutionId, int index) {
    _userContext.User.InstitutionId = Guid.Parse(institutionId);
    _userContext.User.ReceivedMembershipRequests.ElementAtOrDefault(index).IsAccepted = true;

    if (!_userContext.User.InstitutionId.Equals(Guid.Empty)) {
      await _userService.Update(_userContext.User);
    }

    await _institutionService.SendInstitutionConnection(_userContext.User.Institution?.DataBaseConnectionName ?? string.Empty);

    await _settingsService.Create(new() {
      Id = Guid.NewGuid(),
      UserId = _userContext.User.Id,
      AppearanceId = 1
    });

    _userContext.User.Settings = await _settingsService.GetSettingsByUserId(_userContext.User.Id);

    _userContext.NavigateToInstitution(Guid.Parse(institutionId));
  }
}