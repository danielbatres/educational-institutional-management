@inject IJSRuntime JSRuntime

<article>
  <div class="request-info">
    <div class="request-info-title">
      <div class="request-info-box">
      </div>
    </div>
    <h4>Solicitudes de ingreso</h4>
    <p>
      En esta secci&oacute;n recibiras las solicitudes de ingreso que sean enviadas a tu cuenta para que puedas entrar en una instituci&oacute;n
    </p>
  </div>
  <div class="requests">
    @if (ReceivedMembershipRequests.Count.Equals(0)) {
    <div class="no-request">
      <div class="no-request-image"></div>
      <h3>Aun no tienes solicitudes de ingreso...</h3>
      <p>Si estas esperando una solicitud intenta refrescar la p&aacute;gina</p>
    </div>
    } else {
      @for (int i = 0; i < ReceivedMembershipRequests.Count; i++) {
        Institution institutionRequest = Institutions?.Where(x => x.Id ==
        ReceivedMembershipRequests[i].InstitutionId).FirstOrDefault() ?? new();
        string institutionName = institutionRequest?.Name ?? String.Empty;
        int membershipIndex = i;

        if (ReceivedMembershipRequests[i].IsAccepted) continue;
        <div class="request">
          <div class="institution-request">
            <h5>Solicitud de ingreso sin aceptar de:</h5>
            <h4>
              @institutionName
            </h4>
            <p>
              Has sido invitado a ingresar en la instituci&oacute;n
            </p>
          </div>
          <div class="request-author">
            <h5>Autor</h5>
            <p>@ReceivedMembershipRequests[i].Author</p>
          </div>
          @if (ReceivedMembershipRequests[i].Message != null && !ReceivedMembershipRequests[i].Message.Equals(string.Empty)) {
            <div class="request-message">
              <h5>Mensaje</h5>
              <p>
                @ReceivedMembershipRequests[i].Message
              </p>
            </div>
          }
          <div class="request-last-section">
            <p>Enviada @ReceivedMembershipRequests[i].CreationDate</p>
            <button type="button" class="button primary-background-button" @onclick="@(() => AcceptRequest(institutionRequest?.Id.ToString() ?? string.Empty, membershipIndex))">
              Aceptar
            </button>
          </div>
        </div>
      }
    }
  </div>
</article>

@code {
  [Inject]
  private UserContext _userContext { get; set; }
  [Inject]
  private IInstitutionService _institutionService { get; set; }
  [Inject]
  private IUserService _userService { get; set; }
  [Inject]
  private ISettingsService _settingsService { get; set; }
  public List<MembershipRequest> ReceivedMembershipRequests { get; set; } = new();
  private List<Institution> Institutions { get; set; } = new();

  protected override async Task OnInitializedAsync() {
    ReceivedMembershipRequests = _userContext.User.ReceivedMembershipRequests?.ToList() ?? new();

    if (!ReceivedMembershipRequests.Count.Equals(0)) {
      foreach (var request in ReceivedMembershipRequests) {
        Institutions.Add(await _institutionService.GetInstitution(request.InstitutionId.ToString()) ?? new());
      }
    }
  }

  private async Task AcceptRequest(string institutionId, int index) {
    _userContext.User.InstitutionId = Guid.Parse(institutionId);
    _userContext.User.ReceivedMembershipRequests.ElementAtOrDefault(index).IsAccepted = true;

    if (!_userContext.User.InstitutionId.Equals(Guid.Empty)) {
      await _userService.Update(_userContext.User);
    }

    await _institutionService.SendInstitutionConnection(_userContext.User.Institution?.DataBaseConnectionName ?? string.Empty);

    await _settingsService.Create(new() {
      Id = Guid.NewGuid(),
      UserId = _userContext.User.Id,
      AppearanceId = 1
    });

    _userContext.User.Settings = await _settingsService.GetSettingsByUserId(_userContext.User.Id);

    await JSRuntime.InvokeVoidAsync("location.reload");
  }
}