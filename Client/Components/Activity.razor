@inject IJSRuntime JSRuntime

<SectionModule>
  <div class="activity-container">
    <div class="box-background activities-info">
      <h4>Registro de actividades</h4>
      <p>Los cambios que se hagan dentro de la instituci&oacute;n se veran reflejados en esta secci&oacute;n</p>
    </div>
    <div class="activities" @ref="ActivityContainer">
        @foreach (var activity in Activities) {
          string action = string.Empty;
          string actionClass = string.Empty;

          switch (activity.ActionType) {
            case ActionType.Create:
              action = "Creación";
              actionClass = "creation";
              break;
            case ActionType.Update:
              action = "Actualización";
              actionClass = "update";
              break;
            case ActionType.Delete:
              action = "Eliminación";
              actionClass = "delete";
              break;
          }

          <div class="box-background activity-card">
            <div class="action activity-card-item @actionClass">
              <p>@action</p>
            </div>
            <div class="activity-card-item">
              <h5>Usuario</h5>
              <p>@activity.Author</p>
              <p class="activity-username">@activity.UserName</p>
            </div>
            <div class="activity-card-item">
              <h6>@activity.Title</h6>
              <p>@activity.Message</p>
            </div>
            <div class="activity-card-item">
              <h5>Hora de actividad</h5>
              <p>@activity.Date</p>
            </div>
          </div>
        }
    </div>
  </div>
</SectionModule>

@code {
  private List<ActivityLog> Activities { get; set; } = new();
  [Inject]
  private ActivityHubManager _activityHubManager { get; set; }
  [Inject]
  private UserContext _userContext { get; set; }
  private ElementReference ActivityContainer;
  
  protected override async Task OnInitializedAsync() {
    _activityHubManager.ActivityUpdatedHandler(activities => {
      Activities = activities;
      StateHasChanged();
    });
    
    await _activityHubManager.SendActivityUpdatedAsync(_userContext.User.InstitutionId.ToString());
  }

  protected override async Task OnAfterRenderAsync(bool firstRender) {
    if (firstRender) 
      await JSRuntime.InvokeVoidAsync("scrollToBottom", ActivityContainer);
  }
}
