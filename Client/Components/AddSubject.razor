<div class="modal-title">
    <h4>@($"{(ActionType.Equals("create") ? "Agregar nueva asignatura" : "Actualizar asignatura")}")</h4>
    <p>@($"{(ActionType.Equals("create") ? "Crear nueva" : "Actualizar")}") asignatura para la
        instituci&oacute;n <span>(puedes agregar una asignatura en la secci&oacute;n de cursos)</span></p>
</div> 
<form>
    <div class="label label-name">
        <label for="subject-name">Nombre de la asignatura <strong>*</strong></label>
    </div>
    <input value="@SettingsContext.SelectedSubject.Name" type="text" class="input @(IsInputWarning ? "input-error" : "")" placeholder="Ingresar nombre de la asignatura" id="subject-name" @oninput="@(e => UpdateField(e, "name"))">
    <div class="label">
        <label for="subject-description">
            Descripci&oacute;n de la asignatura
        </label>
    </div>
    <input value="@SettingsContext.SelectedSubject.Description" type="text" class="input" placeholder="Ingresar descripciÃ³n de la asignatura" id="subject-description" @oninput="@(e => UpdateField(e, "description"))">
    <div class="label">
        <label for="subject-color">Seleccionar color para la asignatura <strong>*</strong></label>
    </div>
    <input type="color" @bind="@SettingsContext.SelectedSubject.Color">
</form>
<div class="create-subject-button">
    <button type="button" class="button primary-background-button" @onclick="@ActionSubject">@($"{(ActionType.Equals("create") ? "Crear nueva asignatura" : "Actualizar asignatura")}")</button> 
</div>

@code {
    [Inject]
    private SubjectHubManager SubjectHubManager { get; set; }
    [Inject]
    private UserContext UserContext { get; set; }
    [Inject]
    private Validators Validators { get; set; }
    [Inject]
    private StatusModalContext StatusModalContext { get; set; }
    [Inject]
    private SettingsContext SettingsContext { get; set; }
    [Inject]
    private ISubjectService SubjectService { get; set; }
    [Inject]
    private CourseHubManager CourseHubManager { get; set; }
    private bool IsInputWarning { get; set; }
    private string InputErrorWarning { get; set; } = string.Empty;
    [Parameter]
    public string ActionType { get; set; } = string.Empty;

    private void ValidateField() {
        string warning = Validators.IsRequired(SettingsContext.SelectedSubject.Name);
        InputErrorWarning = warning;

        if (!string.IsNullOrEmpty(warning)) {
            IsInputWarning = true;
        }
    }

    private void UpdateField(ChangeEventArgs e, string fieldName) {
        string value = e.Value.ToString();

        switch (fieldName) {
            case "name":
                SettingsContext.SelectedSubject.Name = value;
                break;
            case "description":
                SettingsContext.SelectedSubject.Description = value;
                break;
        }
    }

    private async Task ActionSubject() {
        IsInputWarning = false;
        ValidateField();
        
        if (IsInputWarning) {
            StatusModalContext.SetStatus(StatusType.Danger);
            
            return;
        }

        switch (ActionType) {
            case "create":
                await SubjectService.Create(SettingsContext.SelectedSubject);
                break;
            case "update":
                await SubjectService.Update(SettingsContext.SelectedSubject);
                break;
            default:
                return;
                break;
        }

        string groupName = UserContext.User.InstitutionId.ToString() ?? string.Empty;

        await SubjectHubManager.SendSubjectsUpdatedAsync(groupName);
        await CourseHubManager.SendCoursesUpdatedAsync(groupName);

        StatusModalContext.SetStatus(StatusType.Success);
        SettingsContext.SetShowSettingsModal(false); 
    }
}