<style>
    .theme-container-@Selection {
        background: @SelectedPalette.LightBackgroundColor;
        border-radius: 10px;
    }

    .main-navbar-theme-@Selection {
        border-bottom: 1px solid @SelectedPalette.LightColor;
        background: @SelectedPalette.BackgroundColor; 
    }

    .main-side-bar-@Selection {
        background: @SelectedPalette.SideBarColor;
        border-right: 1px solid @SelectedPalette.LightColor;
    }

    .single-option-@Selection {
        background: @SelectedPalette.LightColor; 
    }

    .nav-@Selection {
        background: @SelectedPalette.LightColor;
    }

    .main-side-bar .nav-DarkBarLightTheme {
        background: #222;
    }

    .box-@Selection {
        background: @SelectedPalette.BackgroundColor;
        border: 1px solid @SelectedPalette.LightColor;
    } 

    .content-text-@Selection div, .single-@Selection {
        background: @SelectedPalette.LightColor;
    }
</style>

<div class="theme-container-@Selection theme-container">
    <div class="main-navbar-theme-@Selection main-navbar-theme">
        <div class="nav-main">
            <div class="single-option primary-background"> 
            </div>
            <div class="single-option-@Selection single-option">
            </div>
        </div>
        <div class="nav-main">
            <div class="single-option-@Selection single-option" >
            </div>
            <div class="circle-option">
            </div>
        </div>
    </div>
    <div class="main-theme-panel">
        <div class="main-side-bar-@Selection main-side-bar">
            <div class="nav-primary">
            </div>
            <div class="nav-@Selection nav-item">
            </div>
            <div class="nav-@Selection nav-item">
            </div>
            <div class="nav-@Selection nav-item">
            </div>
        </div>
        <div class="main-content">
            <div class="box-@Selection box-preview-content">
                <div class="single-container">
                    <div class="single-@Selection single-box-option">
                    </div>
                </div>
                <div class="single-container">
                    <div class="single-@Selection single-box-option">
                    </div>
                </div>
            </div>
            <div class="box-@Selection box-preview-content">
                <div class="single-content">
                    <div class="single-container">
                        <div class="single-@Selection single-box-option">
                        </div>
                    </div>
                    <div class="single-container">
                        <div class="single-@Selection single-box-option">
                        </div>
                    </div>
                </div>
                <div class="content-text-@Selection content-text">
                    <div></div>
                    <div></div>
                    <div></div>
                </div>
                <div class="status-container">
                    <div class="green-status">
                    </div>
                    <div class="danger-status">
                    </div>
                    <div class="warning-status">
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public AppereanceSelection Selection { get; set; }
    [Inject]
    private ThemeContext ThemeContext { get; set; }
    private Palette SelectedPalette { get; set; } 

    protected override void OnParametersSet() {
        SetSelectedAppearance();
    }

    public void SetSelectedAppearance() {
        switch (Selection) {
            case AppereanceSelection.LightTheme:
                SelectedPalette = ThemeContext.LightTheme;
                break;
            case AppereanceSelection.AmbientTheme:
                SelectedPalette = ThemeContext.AmbientTheme;
                break;
            case AppereanceSelection.DarkBarLightTheme:
                SelectedPalette = ThemeContext.DarkBarLightTheme;
                break;
            case AppereanceSelection.DarkTheme:
                SelectedPalette = ThemeContext.DarkTheme;
                break;
            case AppereanceSelection.DarkerTheme:
                SelectedPalette = ThemeContext.DarkerTheme;
                break;
        }
    }
}