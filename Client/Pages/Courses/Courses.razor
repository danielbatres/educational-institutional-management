@page "/application/{InstitutionId}/courses"
@layout ApplicationLayout

<PageTitle>Aplicaci&oacute;n | Cursos</PageTitle>

<SectionModule>
  <div class="courses-container">
    <div class="box-background courses-search">
      <div>
        <h3>Cursos de la instituci&oacute;n</h3>
        <p>Busca la informaci&oacute;n de cualquier curso de la instituci&oacute;n</p>
      </div>
      <div>
        <input type="text" class="input" placeholder="Buscar curso">
        <button type="button" class="button primary-background-button" @onclick="@NavigateToNewCourse">
          Agregar un nuevo curso
        </button>
      </div>
    </div>
    <div class="box-background">
      <div class="cards-container">
        @if (CoursesList.Count != 0) {
          @foreach (var course in CoursesList)
          {
            <div class="course-card">
              <div>
                <h5>Nombre del curso</h5>
                <div class="course-name">
                  <p>@course.Name</p>
                  <h4>@course.Acronym</h4>
                </div>
              </div>
              <div>
                <h5>Guia del curso</h5>
                <div class="course-guide">
                  <div>
                    @if (course.GuideId != Guid.Empty) {
                      User user = Users.FirstOrDefault(u => u.Id.Equals(course.GuideId));
                      string imageSrc = string.Empty;
                      if (user != null) {
                        if (user.Photo != null)
                        {
                          var imageBase64 = Convert.ToBase64String(user.Photo);
                          imageSrc = $"data:image/png;base64,{imageBase64}";
                        }

                        <div class="guide-image">
                          @if (imageSrc != string.Empty)
                          {
                            <img src="@imageSrc" alt="@user.Name">
                          }
                        </div>
                        <div>
                          <p>@user.Name @user.LastName</p>
                          <p>@user.Register.Email</p>
                        </div>
                      }
                    } else {
                      <p>No se ha agregado un gu&iacute;a para el curso</p>
                    }
                  </div>
                </div>
              </div>
              <div>
                <h5>Materias del curso</h5>
                <div class="subjects">
                  @if (!SubjectCourses.Any(s => s.Any(sc => sc.CourseId.Equals(course.Id)))) {
                    <p>No se han agregado materias a este curso</p>
                  } else {
                    @foreach (var subjectCourse in SubjectCourses)
                    {

                      @foreach (var sub in subjectCourse)
                      {
                        if (sub.CourseId != course.Id) { continue; }
                        Subject subject = Subjects.FirstOrDefault(s => s.Id.Equals(sub.SubjectId));

                        <div style="background: @subject.Color;">
                          <p>@subject.Name</p>
                        </div>
                      }
                    }
                  }
                  
                </div>
              </div>
              <div class="course-students">
                <div class="students-images">
                  <button type="button" class="button primary-background-button"
                    @onclick="@(() => NavigateToCourse(course))">Editar curso</button>
                </div>
                <div class="students-quantity centered-container">
                  <i class="fi fi-tr-id-card-clip-alt"></i>
                  <p>@(Students.Where(u => u.CourseId.Equals(course.Id)).ToList().Count.ToString()) Estudiantes</p>
                </div>
              </div>
            </div>
          }
        } else {
          <div class="courses-no-results">
            <h4>No se encontrar&oacute;n resultados</h4>
            <p>No se encontrar&oacute;n resultados para los cursos de la instituci&oacute;n</p>
          </div>
        }
      </div>
    </div>
  </div>
</SectionModule>

@code {
  [Parameter]
  public string InstitutionId { get; set; }
  [Inject]
  private CourseHubManager _courseHubManager { get; set; }
  [Inject]
  private SubjectHubManager SubjectHubManager { get; set; }
  [Inject]
  private ISubjectCourseService SubjectCourseService { get; set; }
  [Inject]
  private StudentHubManager StudentsHubManager { get; set; }
  [Inject]
  private UserContext _userContext { get; set; }
  [Inject]
  private NavigationManager _navigationManager { get; set; }
  [Inject]
  private CourseContext _courseContext { get; set; }
  [Inject]
  private SideBarContext SideBarContext { get; set; }
  [Inject]
  private ContentContext ContentContext { get; set; }
  [Inject]
  private UsersHubManager UsersHubManager { get; set; }
  private List<User> Users  { get; set; } = new();
  private List<Course> CoursesList { get; set; } = new();
  private List<Course> CoursesListFiltered { get; set; } = new();
  private List<Student> Students { get; set; } = new();
  private List<List<SubjectCourse>> SubjectCourses { get; set; } = new();
  private List<Subject> Subjects { get; set; } = new();
  private string SearchValue { get; set; } = string.Empty; 
  private int RenderCount { get; set; }
  
  protected override async Task OnInitializedAsync() {
    SideBarContext.SetSelectedOptionMainMenu(2);
    ContentContext.SetSectionContent("Cursos", "Ver cursos");

    SubjectHubManager.SubjectsUpdatedHandler(async subjects => {
      Subjects = subjects;
      StateHasChanged();
    });

    _courseHubManager.CoursesUpdatedHandler(async courses => {
      CoursesList = courses;
      SubjectCourses.Clear();

      foreach (var course in courses) {
        SubjectCourses.Add(await SubjectCourseService.Get(course.Id));
      }
      StateHasChanged();
    });

    StudentsHubManager.StudentsUpdatedHandler(students => {
      Students = students;
      StateHasChanged();
    });

    UsersHubManager.UsersUpdatedHandler(users => {
      Users = users;
      StateHasChanged();
    });

    string groupName = _userContext.User.InstitutionId.ToString() ?? string.Empty;

    await _courseHubManager.SendCoursesUpdatedAsync(groupName);
    await StudentsHubManager.SendStudentsUpdatedAsync(groupName);
    await SubjectHubManager.SendSubjectsUpdatedAsync(groupName);
    await UsersHubManager.SendUsersUpdatedAsync(groupName);
  }

  protected override async Task OnAfterRenderAsync(bool firstRender) {
    if (RenderCount == 2) {

    }

    RenderCount++;
  }

  private void NavigateToNewCourse() {
    _navigationManager.NavigateTo($"/application/{_userContext.User.InstitutionId}/courses/new-course");
  }

  private void NavigateToCourse(Course course) {
    _courseContext.SetCourse(course);

    _navigationManager.NavigateTo($"/application/{_userContext.User.InstitutionId}/courses/{course.Id}");
  }
}
