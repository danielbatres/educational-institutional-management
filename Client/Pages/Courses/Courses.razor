@page "/application/{InstitutionId}/courses"
@layout ApplicationLayout

<PageTitle>Aplicaci&oacute;n | Cursos</PageTitle>

<SectionModule>
  <div class="courses-container">
    <div class="box-background courses-search">
      <div>
        <h3>Cursos de la instituci&oacute;n</h3>
        <p>Busca la informaci&oacute;n de cualquier curso de la instituci&oacute;n</p>
      </div>
      <div>
        <input type="text" class="input" placeholder="Buscar curso">
        <button type="button" class="button primary-background-button" @onclick="@NavigateToNewCourse">
          Agregar un nuevo curso
        </button>
      </div>
    </div>
    <div class="box-background">
      <div class="cards-container">
        @foreach (var course in CoursesList) {
          <div class="course-card" @onclick="@(() => NavigateToCourse(course))">
            <div>
              <h5>Nombre del curso</h5>
              <div class="course-name">
                <p>@course.Name</p>
                <h4>@course.Acronym</h4>
              </div>
            </div>
            <div>
              <h5>Guia del curso</h5>
              <div class="course-guide">
                <div>
                  <div class="guide-image"></div>
                  <div>
                    <p>Nombre del guia del curso</p>
                    <p>correodelguiadelcurso@edu</p>
                  </div>
                </div>
                <div class="course-guide-option centered-container">
                  <i class="fi fi-tr-messages"></i>
                </div>
              </div>
            </div>
            <div>
              <h5>Materias del curso</h5>
              <div class="subjects">
                <div>
                  <p>Matem&aacute;ticas</p>
                </div>
                <div>
                  <p>Sociales</p>
                </div>
                <div>
                  <p>Ciencias f&iacute;sicas</p>
                </div>
                <div>
                  <p>Lenguaje</p>
                </div>
              </div>
            </div>
            <div class="course-students">
              <div class="students-images">
                <button type="button" class="primary-background-button">Editar curso</button>
              </div>
              <div class="students-quantity centered-container">
                <i class="fi fi-tr-id-card-clip-alt"></i>
                <p>31 Estudiantes</p>
              </div>
            </div>
          </div>
        }
        @for(int i = 0; i < 5; i++) {
          <div class="course-card">
            <div>
              <h5>Nombre del curso</h5>
              <div class="course-name">
                <p>Este es el nombre del curso</p>
                <h4>BBBB</h4>
              </div>
            </div>
            <div>
              <h5>Guia del curso</h5>
              <div class="course-guide">
                <div>
                  <div class="guide-image"></div>
                  <div>
                    <p>Nombre del guia del curso</p>
                    <p>correodelguiadelcurso@edu</p>
                  </div>
                </div>
                <div class="course-guide-option centered-container">
                  <i class="fi fi-tr-messages"></i>
                </div>
              </div>
            </div>
            <div>
              <h5>Materias del curso</h5>
              <div  class="subjects">
                <div>
                  <p>Matem&aacute;ticas</p>
                </div>
                <div>
                  <p>Sociales</p>
                </div>
                <div>
                  <p>Ciencias f&iacute;sicas</p>
                </div> 
                <div>
                  <p>Lenguaje</p>
                </div>
              </div>
            </div>
            <div class="course-students">
              <div class="students-images">
                <div class="student-image">

                </div>
                <div class="student-image">
                  
                </div>
                <div class="student-image">
                  
                </div>
                <div class="student-image">
                  
                </div>
              </div>
              <div class="students-quantity centered-container">
                <i class="fi fi-tr-id-card-clip-alt"></i>
                <p>31 Estudiantes</p>
              </div>
            </div>
          </div>
        }
      </div>
    </div>
  </div>
</SectionModule>

@code {
  [Parameter]
  public string InstitutionId { get; set; }
  [Inject]
  private CourseHubManager _courseHubManager { get; set; }
  [Inject]
  private SubjectHubManager SubjectHubManager { get; set; }
  [Inject]
  private ISubjectCourseService SubjectCourseService { get; set; }
  [Inject]
  private StudentHubManager StudentsHubManager { get; set; }
  [Inject]
  private UserContext _userContext { get; set; }
  [Inject]
  private NavigationManager _navigationManager { get; set; }
  [Inject]
  private CourseContext _courseContext { get; set; }
  [Inject]
  private SideBarContext SideBarContext { get; set; }
  [Inject]
  private ContentContext ContentContext { get; set; }
  private List<Course> CoursesList { get; set; } = new();
  private List<Course> CoursesListFiltered { get; set; } = new();
  private List<Student> Students { get; set; } = new();
  private List<SubjectCourse> SubjectCourses { get; set; } = new();
  private List<Subject> Subjects { get; set; } = new();
  private int RenderCount { get; set; }
  
  protected override async Task OnInitializedAsync() {
    SideBarContext.SetSelectedOptionMainMenu(2);
    ContentContext.SetSectionContent("Cursos", "Ver cursos");

    SubjectHubManager.SubjectsUpdatedHandler(subjects => {
      Subjects = subjects;
      StateHasChanged();
    });

    _courseHubManager.CoursesUpdatedHandler(courses => {
      CoursesList = courses;
      StateHasChanged();
    });

    StudentsHubManager.StudentsUpdatedHandler(students => {
      Students = students;
      StateHasChanged();
    });

    string groupName = _userContext.User.InstitutionId.ToString() ?? string.Empty;

    await _courseHubManager.SendCoursesUpdatedAsync(groupName);
    await StudentsHubManager.SendStudentsUpdatedAsync(groupName);
    await SubjectHubManager.SendSubjectsUpdatedAsync(groupName);
  }

  protected override async Task OnAfterRenderAsync(bool firstRender) {
    if (RenderCount == 2) {

    }

    RenderCount++;
  }

  private void NavigateToNewCourse() {
    _navigationManager.NavigateTo($"/application/{_userContext.User.InstitutionId}/courses/new-course");
  }

  private void NavigateToCourse(Course course) {
    _courseContext.SetCourse(course);

    _navigationManager.NavigateTo($"/application/{_userContext.User.InstitutionId}/courses/{course.Id}");
  }
}
