@page "/user-profile/{UserId}"

<PageTitle>Landing | Perfil de usuario</PageTitle>

<LandingComponents MinHeight="min-height: 100vh;">
  <section>
    <article class="sidebar-user-profile @(MenuToggle ? "low-side" : "")">
      <div class="sidebar-user">
        <div>
          <div class="account">
            <h5>
              Configuraciones de usuario
            </h5>
            <ul>
              <li class="my-account">
                <p>Mi cuenta</p>
                <i class="fi fi-tr-chevron-double-down" @onclick="@(() => MenuToggle = !MenuToggle)"></i>
              </li>
            </ul>
          </div>
          <div class="access">
            <h5>
              Acceso de trabajo
            </h5>
            <ul>
              <li>
                <p>Solicitudes de ingreso</p>
              </li>
            </ul>
          </div>
          </div>
        <div class="exit-sesion">
          <ul>
            <li>
              <p>Cerrar sesi&oacute;n</p>
            </li>
          </ul>
        </div>
      </div>
    </article>
    <UserProfile />
  </section>
</LandingComponents>

@code {
  private User UserBackup;
  private User NewUser;
  [Inject]
  private UserContext UserContext { get; set; }
  [Inject]
  private NavigationManager NavigationManager { get; set; }
  [Inject]
  private IUserService UserService { get; set; }
  [Inject]
  private LoadingContext LoadingContext { get; set; }
  [Parameter]
  public String UserId { get; set; } = string.Empty;
  private bool MenuToggle { get; set; } = false;
  private int SelectedContainer { get; set; } = 0;
  private bool HasChanges = false;

  protected override void OnInitialized() {
    UserContext.OnChange += HandleStateChange;

    if (UserContext.User != null) {
      UserBackup = UserContext.User.Clone();
      NewUser = UserContext.User.Clone();
    }
  }

  protected override void OnParametersSet() {
    if (UserContext.User == null) {
      NavigationManager.NavigateTo("/");
    }

    string Id = UserContext.User?.Id.ToString() ?? string.Empty;

    if (!UserId.Equals(Id)) {
      NavigationManager.NavigateTo("/");
    }
  }

  private async Task UpdateUser() {
    LoadingContext.SetLoading(true);
    LoadingContext.SetLoadingMessage("Actualizando tu usuario...");

    await UserService.Update(NewUser);
    UserBackup = UserContext.User.Clone();
    NewUser = UserContext.User.Clone();
    HasChanges = false;
    LoadingContext.SetLoading(false);
  }

  private void SetChanges() {
    HasChanges = !UserBackup.Equals(NewUser);
  }

  private void RevertChanges() {
    NewUser = UserBackup.Clone();

    HasChanges = false;
  }

  private void UpdateName(ChangeEventArgs e) {
    NewUser.Name = e.Value.ToString();
    SetChanges();
  }

  private void UpdateLastName(ChangeEventArgs e) {
    NewUser.LastName = e.Value.ToString();
    SetChanges();
  }

  private void UpdateLocation(ChangeEventArgs e) {
    NewUser.Location = e.Value.ToString();
    SetChanges();
  }

  private void UpdateBio(ChangeEventArgs e) {
    NewUser.Bio = e.Value.ToString();
    SetChanges();
  }

  private void UpdateEmail(ChangeEventArgs e) {
    NewUser.Register.Email = e.Value.ToString();
    SetChanges();
  }

  private void UpdatePhoneNumber(ChangeEventArgs e) {
    NewUser.PhoneNumber = e.Value.ToString();
    SetChanges();
  }

  private void HandleStateChange() {
    if (UserContext.User == null) {
      NavigationManager.NavigateTo("/");
    }

    StateHasChanged();
  }
}