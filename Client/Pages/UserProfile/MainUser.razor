@page "/user-settings/{UserId}/{UserOption}"

<PageTitle>Landing | Perfil de usuario</PageTitle>

<LandingComponents MinHeight="min-height: 100vh;">
  <section>
    <article class="sidebar-user-profile @(MenuToggle ? "low-side" : "")">
      <div class="sidebar-user">
        <div>
          <div class="account">
            <h5>
              Configuraciones de usuario
            </h5>
            <ul>
              <li class="my-account @(ProfileContext.SelectedContainer == 1 ? "selected-option" : "")" @onclick="@(() => SetSelection(1))">
                <i class="fi fi-tr-circle-user icon-info"></i>
                <p>Mi cuenta</p>
                <i class="fi fi-tr-chevron-double-down icn" @onclick="@(() => MenuToggle = !MenuToggle)"></i>
              </li>
            </ul>
          </div>
          <div class="access">
            <h5>
              Acceso de trabajo
            </h5>
            <ul>
              <li class="@(ProfileContext.SelectedContainer == 2 ? "selected-option" : "")"
                @onclick="@(() => SetSelection(2))">
                <i class="fi fi-tr-ballot icon-info"></i>
                <p>Solicitudes de ingreso</p>
              </li>
            </ul>
          </div>
          </div>
        <div class="exit-sesion">
          <ul>
            <li>
              <i class="fi fi-tr-address-card"></i>
              <p>Cerrar sesi&oacute;n</p>
            </li>
          </ul>
        </div>
      </div>
    </article>
    @switch(UserOption) {
      case "profile":
        <UserProfile />
        break;
      case "membership-requests":
        <MembershipRequests />
        break;
    }
  </section>
</LandingComponents>

@code {
  [Inject]
  private ProfileContext ProfileContext { get; set; }
  [Inject]
  private UserContext UserContext { get; set; }
  [Inject]
  private NavigationManager NavigationManager { get; set; }
  [Inject]
  private IUserService UserService { get; set; }
  [Parameter]
  public string UserOption { get; set; }
  [Parameter]
  public String UserId { get; set; } = string.Empty;
  private bool MenuToggle { get; set; } = false;

  protected override void OnInitialized() {
    UserContext.OnChange += HandleStateChange;
    ProfileContext.OnChange += HandleStateChange;
  }

  private void SetSelection(int selection) {
    ProfileContext.SetSelectedContainer(selection);
    
    switch (selection) {
      case 1:
        NavigationManager.NavigateTo($"/user-settings/{UserId}/profile");
        break;
      case 2:
        NavigationManager.NavigateTo($"/user-settings/{UserId}/membership-requests");
        break;
    }
  }

  protected override void OnParametersSet() {
    if (UserContext.User == null) {
      NavigationManager.NavigateTo("/");
    }

    string Id = UserContext.User?.Id.ToString() ?? string.Empty;

    if (!UserId.Equals(Id)) {
      NavigationManager.NavigateTo("/");
    }

    switch (UserOption) {
      case "profile":
        ProfileContext.SetSelectedContainer(1);
        break;
      case "membership-requests":
        ProfileContext.SetSelectedContainer(2);
        break;
    }
  }

  private void HandleStateChange() {
    if (UserContext.User == null) {
      NavigationManager.NavigateTo("/");
    }

    StateHasChanged();
  }
}