@page "/application/{InstitutionIdParam}/settings/{Direction}"
@layout ApplicationLayout

<PageTitle>Aplicaci&oacute;n | Configuraciones</PageTitle>

<section>
  <Bar SideBarOption="settings-menu" IsToggle=@false Menu=@Menu Styles="min-width: 5%; max-width: 18%;"/>
  <div class="settings-content">
      @switch (Direction) {
        case "my-account":
          ContentContext.SetSectionContent(SectionName, "Mi cuenta");
          SideBarContext.SetSelectedOptionSettingsMenu(0);
          <div class="user-profile-container-roles">
            <div class="user-profile-container-settings">
              <div class="user-profile-content">
                <UserProfile />
              </div>
              <article>
                <div class="asigned-roles">
                  <h5>Roles asignados</h5>
                  <div class="roles">
                    <div class="rol-box">
                      <div class="rol-color" style="background: var(--special-light-color);"></div>
                      <p>Todos</p>
                    </div>
                    @foreach (var userRole in UserRole) {
                      if (!userRole.UserId.Equals(UserContext.User.Id)) continue;
                      Role role = Roles.FirstOrDefault(r => r.Id.Equals(userRole.RoleId));

                      <div class="rol-box">
                        <div class="rol-color" style="background: @role.RoleColor;"></div>
                        <p>@role.Name</p>
                      </div>
                    }
                  </div>
                </div>
              </article>
            </div>
          </div>
          break;
        case "roles":
          ContentContext.SetSectionContent(SectionName, "Roles");
          SideBarContext.SetSelectedOptionSettingsMenu(3);
          <Roles />
          break;
        case "users":
          ContentContext.SetSectionContent(SectionName, "Usuarios");
          SideBarContext.SetSelectedOptionSettingsMenu(2);
          <Users />
          break;
        case "appearance":
          ContentContext.SetSectionContent(SectionName, "Apariencia");
          SideBarContext.SetSelectedOptionSettingsMenu(1);
          <AppearanceSettings />
          break;
        case "students":
          ContentContext.SetSectionContent(SectionName, "Estudiantes");
          SideBarContext.SetSelectedOptionSettingsMenu(4);
          <StudentsSettings />
          break;
        case "subjects":
          ContentContext.SetSectionContent(SectionName, "Asignaturas");
          SideBarContext.SetSelectedOptionSettingsMenu(5);
          <SubjectsSettings />
          break;
        case "payments":
          ContentContext.SetSectionContent(SectionName, "Pagos de estudiantes");
          SideBarContext.SetSelectedOptionSettingsMenu(6);
          <PaymentsSettings />
          break;
        case "institution":
          ContentContext.SetSectionContent(SectionName, "Institucion");
          SideBarContext.SetSelectedOptionSettingsMenu(7);
          <InstitutionInfo />
          break;
        case "payment-plan":
          ContentContext.SetSectionContent(SectionName, "Plan de pago");
          SideBarContext.SetSelectedOptionSettingsMenu(8);
          <PaymentPlan />
          break;
      }
  </div>
</section>

@code {
  private string SectionName { get; } = "Configuraciones";
  [Parameter]
  public string Direction { get; set; } = string.Empty;
  [Parameter]
  public string InstitutionIdParam { get; set; } = string.Empty;
  [CascadingParameter(Name = "Institution")]
  public Guid InstitutionId { get; set; }
  [Inject]
  private ContentContext ContentContext { get; set; }
  [Inject]
  private UserContext UserContext { get; set; }
  [Inject]
  private ISettingsService _settingsService { get; set; }
  [Inject]
  private SideBarContext SideBarContext { get; set; }
  [Inject]
  private RolesHubManager RolesHubManager { get; set; }
  [Inject]
  private UserRoleHubManager UserRoleHubManager { get; set; }
  private List<Role> Roles { get; set; } = new();
  private List<UserRole> UserRole { get; set; } = new();
  private User User = new();
  private Menu Menu { get; set; } = new();
 
  protected override async Task OnInitializedAsync() {
    RolesHubManager.RolesUpdatedHandler(roles => {
      Roles = roles;
      StateHasChanged();
    });

    UserRoleHubManager.UserRolesUpdatedHandler(userRole => {
      UserRole = userRole;
      StateHasChanged();
    });

    string groupName = UserContext.User.InstitutionId.ToString() ?? string.Empty;

    await RolesHubManager.SendRolesUpdatedAsync(groupName);
    await UserRoleHubManager.SendUserRolesUpdatedAsync(groupName);
  }

  protected override void OnInitialized() {
    SideBarContext.SetSelectedOptionMainMenu(8);
    SideBarContext.SetSelectedOptionSettingsMenu(0);
    ContentContext.SetSectionContent("Configuraciones", "Mi cuenta");

    Menu = new Menu() {
      MenuLabels = new List<string>() {
        "configuraciones de usuario", "configuraciones de aplicacion", "configuraciones de estudiantes", "configuraciones de institucion"
      },
      MenuItems = new List<List<List<string>>>() {
        new() {
          new() {
            "Mi cuenta", "fi fi-tr-circle-user", "0", $"/application/{InstitutionId}/settings/my-account", "0", ""
          }
        },
        new() {
          new() {
            "Apariencia", "fi fi-tr-swatchbook", "1", $"/application/{InstitutionId}/settings/appearance", "0", ""
          },
          new() {
            "Usuarios", "fi fi-tr-users-medical", "2", $"/application/{InstitutionId}/settings/users", "0", "6"
          },
          new() { 
            "Roles", "fi fi-tr-rectangle-list", "3", $"/application/{InstitutionId}/settings/roles", "0", "3"
          }
        },
        new() {
          new() { 
            "Estudiantes", "fi fi-tr-book-bookmark", "4", $"/application/{InstitutionId}/settings/students", "0", "5"
          },
          new() {
            "Asignaturas", "fi fi-tr-hockey-puck", "5", $"/application/{InstitutionId}/settings/subjects", "0", "7"
          }
        }, 
        new() {
          new() {
            "Instituci√≥n", "fi fi-tr-house-chimney", "7", $"/application/{InstitutionId}/settings/institution", "0", "8"
          }
        }
      },
      LastOption = new() {
      "Cerrar sesion", "fi fi-tr-arrow-to-right", "9", "/"
      }
    };
  }
}